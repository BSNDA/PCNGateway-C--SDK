// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: blockchain.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from blockchain.proto</summary>
public static partial class BlockchainReflection
{

    #region Descriptor
    /// <summary>File descriptor for blockchain.proto</summary>
    public static pbr::FileDescriptor Descriptor
    {
        get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BlockchainReflection()
    {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "ChBibG9ja2NoYWluLnByb3RvIjIKBVByb29mEg8KB2NvbnRlbnQYASABKAwS",
              "GAoEdHlwZRgCIAEoDjIKLlByb29mVHlwZSLaAQoLQmxvY2tIZWFkZXISEAoI",
              "cHJldmhhc2gYASABKAwSEQoJdGltZXN0YW1wGAIgASgEEg4KBmhlaWdodBgD",
              "IAEoBBISCgpzdGF0ZV9yb290GAQgASgMEhkKEXRyYW5zYWN0aW9uc19yb290",
              "GAUgASgMEhUKDXJlY2VpcHRzX3Jvb3QYBiABKAwSEgoKcXVvdGFfdXNlZBgH",
              "IAEoBBITCgtxdW90YV9saW1pdBgIIAEoBBIVCgVwcm9vZhgJIAEoCzIGLlBy",
              "b29mEhAKCHByb3Bvc2VyGAogASgMIiYKBlN0YXR1cxIMCgRoYXNoGAEgASgM",
              "Eg4KBmhlaWdodBgCIAEoBCKwAQoPQWNjb3VudEdhc0xpbWl0EhoKEmNvbW1v",
              "bl9xdW90YV9saW1pdBgBIAEoBBJGChRzcGVjaWZpY19xdW90YV9saW1pdBgC",
              "IAMoCzIoLkFjY291bnRHYXNMaW1pdC5TcGVjaWZpY1F1b3RhTGltaXRFbnRy",
              "eRo5ChdTcGVjaWZpY1F1b3RhTGltaXRFbnRyeRILCgNrZXkYASABKAkSDQoF",
              "dmFsdWUYAiABKAQ6AjgBInAKClJpY2hTdGF0dXMSDAoEaGFzaBgBIAEoDBIO",
              "CgZoZWlnaHQYAiABKAQSDQoFbm9kZXMYAyADKAwSEAoIaW50ZXJ2YWwYBCAB",
              "KAQSDwoHdmVyc2lvbhgFIAEoDRISCgp2YWxpZGF0b3JzGAYgAygMIrYBCgtU",
              "cmFuc2FjdGlvbhIKCgJ0bxgBIAEoCRINCgVub25jZRgCIAEoCRINCgVxdW90",
              "YRgDIAEoBBIZChF2YWxpZF91bnRpbF9ibG9jaxgEIAEoBBIMCgRkYXRhGAUg",
              "ASgMEg0KBXZhbHVlGAYgASgMEhAKCGNoYWluX2lkGAcgASgNEg8KB3ZlcnNp",
              "b24YCCABKA0SDQoFdG9fdjEYCSABKAwSEwoLY2hhaW5faWRfdjEYCiABKAwi",
              "ZgoVVW52ZXJpZmllZFRyYW5zYWN0aW9uEiEKC3RyYW5zYWN0aW9uGAEgASgL",
              "MgwuVHJhbnNhY3Rpb24SEQoJc2lnbmF0dXJlGAIgASgMEhcKBmNyeXB0bxgD",
              "IAEoDjIHLkNyeXB0byJqChFTaWduZWRUcmFuc2FjdGlvbhI0ChR0cmFuc2Fj",
              "dGlvbl93aXRoX3NpZxgBIAEoCzIWLlVudmVyaWZpZWRUcmFuc2FjdGlvbhIP",
              "Cgd0eF9oYXNoGAIgASgMEg4KBnNpZ25lchgDIAEoDCI1CglCbG9ja0JvZHkS",
              "KAoMdHJhbnNhY3Rpb25zGAEgAygLMhIuU2lnbmVkVHJhbnNhY3Rpb24iJQoQ",
              "Q29tcGFjdEJsb2NrQm9keRIRCgl0eF9oYXNoZXMYASADKAwiUAoFQmxvY2sS",
              "DwoHdmVyc2lvbhgBIAEoDRIcCgZoZWFkZXIYAiABKAsyDC5CbG9ja0hlYWRl",
              "chIYCgRib2R5GAMgASgLMgouQmxvY2tCb2R5Il4KDENvbXBhY3RCbG9jaxIP",
              "Cgd2ZXJzaW9uGAEgASgNEhwKBmhlYWRlchgCIAEoCzIMLkJsb2NrSGVhZGVy",
              "Eh8KBGJvZHkYAyABKAsyES5Db21wYWN0QmxvY2tCb2R5IjwKDkJsb2NrV2l0",
              "aFByb29mEhMKA2JsaxgBIAEoCzIGLkJsb2NrEhUKBXByb29mGAIgASgLMgYu",
              "UHJvb2YiNAoIQmxvY2tUeHMSDgoGaGVpZ2h0GAEgASgEEhgKBGJvZHkYAyAB",
              "KAsyCi5CbG9ja0JvZHkiMwoJQmxhY2tMaXN0EhIKCmJsYWNrX2xpc3QYASAD",
              "KAwSEgoKY2xlYXJfbGlzdBgCIAMoDCIdCgtTdGF0ZVNpZ25hbBIOCgZoZWln",
              "aHQYASABKAQqMgoJUHJvb2ZUeXBlEhIKDkF1dGhvcml0eVJvdW5kEAASCAoE",
              "UmFmdBABEgcKA0JmdBACKiMKBkNyeXB0bxILCgdERUZBVUxUEAASDAoIUkVT",
              "RVJWRUQQAWIGcHJvdG8z"));
        descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
            new pbr::FileDescriptor[] { },
            new pbr::GeneratedClrTypeInfo(new[] { typeof(global::ProofType), typeof(global::CitaCrypto), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Proof), global::Proof.Parser, new[]{ "Content", "Type" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BlockHeader), global::BlockHeader.Parser, new[]{ "Prevhash", "Timestamp", "Height", "StateRoot", "TransactionsRoot", "ReceiptsRoot", "QuotaUsed", "QuotaLimit", "Proof", "Proposer" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Status), global::Status.Parser, new[]{ "Hash", "Height" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AccountGasLimit), global::AccountGasLimit.Parser, new[]{ "CommonQuotaLimit", "SpecificQuotaLimit" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::RichStatus), global::RichStatus.Parser, new[]{ "Hash", "Height", "Nodes", "Interval", "Version", "Validators" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CitaTransaction), global::CitaTransaction.Parser, new[]{ "To", "Nonce", "Quota", "ValidUntilBlock", "Data", "Value", "ChainId", "Version", "ToV1", "ChainIdV1" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UnverifiedTransaction), global::UnverifiedTransaction.Parser, new[]{ "Transaction", "Signature", "Crypto" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SignedTransaction), global::SignedTransaction.Parser, new[]{ "TransactionWithSig", "TxHash", "Signer" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BlockBody), global::BlockBody.Parser, new[]{ "Transactions" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CompactBlockBody), global::CompactBlockBody.Parser, new[]{ "TxHashes" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Block), global::Block.Parser, new[]{ "Version", "Header", "Body" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CompactBlock), global::CompactBlock.Parser, new[]{ "Version", "Header", "Body" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BlockWithProof), global::BlockWithProof.Parser, new[]{ "Blk", "Proof" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BlockTxs), global::BlockTxs.Parser, new[]{ "Height", "Body" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BlackList), global::BlackList.Parser, new[]{ "BlackList_", "ClearList" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StateSignal), global::StateSignal.Parser, new[]{ "Height" }, null, null, null, null)
            }));
    }
    #endregion

}
#region Enums
public enum ProofType
{
    [pbr::OriginalName("AuthorityRound")] AuthorityRound = 0,
    [pbr::OriginalName("Raft")] Raft = 1,
    [pbr::OriginalName("Bft")] Bft = 2,
}

public enum CitaCrypto
{
    [pbr::OriginalName("DEFAULT")] Default = 0,
    [pbr::OriginalName("RESERVED")] Reserved = 1,
}

#endregion

#region Messages
public sealed partial class Proof : pb::IMessage<Proof>
{
    private static readonly pb::MessageParser<Proof> _parser = new pb::MessageParser<Proof>(() => new Proof());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Proof> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::BlockchainReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proof()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proof(Proof other) : this()
    {
        content_ = other.content_;
        type_ = other.type_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proof Clone()
    {
        return new Proof(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private pb::ByteString content_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content
    {
        get { return content_; }
        set
        {
            content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::ProofType type_ = global::ProofType.AuthorityRound;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProofType Type
    {
        get { return type_; }
        set
        {
            type_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as Proof);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Proof other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Content != other.Content) return false;
        if (Type != other.Type) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Content.Length != 0) hash ^= Content.GetHashCode();
        if (Type != global::ProofType.AuthorityRound) hash ^= Type.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Content.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteBytes(Content);
        }
        if (Type != global::ProofType.AuthorityRound)
        {
            output.WriteRawTag(16);
            output.WriteEnum((int)Type);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Content.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
        }
        if (Type != global::ProofType.AuthorityRound)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Proof other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Content.Length != 0)
        {
            Content = other.Content;
        }
        if (other.Type != global::ProofType.AuthorityRound)
        {
            Type = other.Type;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        Content = input.ReadBytes();
                        break;
                    }
                case 16:
                    {
                        Type = (global::ProofType)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

public sealed partial class BlockHeader : pb::IMessage<BlockHeader>
{
    private static readonly pb::MessageParser<BlockHeader> _parser = new pb::MessageParser<BlockHeader>(() => new BlockHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::BlockchainReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeader()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeader(BlockHeader other) : this()
    {
        prevhash_ = other.prevhash_;
        timestamp_ = other.timestamp_;
        height_ = other.height_;
        stateRoot_ = other.stateRoot_;
        transactionsRoot_ = other.transactionsRoot_;
        receiptsRoot_ = other.receiptsRoot_;
        quotaUsed_ = other.quotaUsed_;
        quotaLimit_ = other.quotaLimit_;
        proof_ = other.proof_ != null ? other.proof_.Clone() : null;
        proposer_ = other.proposer_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeader Clone()
    {
        return new BlockHeader(this);
    }

    /// <summary>Field number for the "prevhash" field.</summary>
    public const int PrevhashFieldNumber = 1;
    private pb::ByteString prevhash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Prevhash
    {
        get { return prevhash_; }
        set
        {
            prevhash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp
    {
        get { return timestamp_; }
        set
        {
            timestamp_ = value;
        }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private ulong height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Height
    {
        get { return height_; }
        set
        {
            height_ = value;
        }
    }

    /// <summary>Field number for the "state_root" field.</summary>
    public const int StateRootFieldNumber = 4;
    private pb::ByteString stateRoot_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString StateRoot
    {
        get { return stateRoot_; }
        set
        {
            stateRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "transactions_root" field.</summary>
    public const int TransactionsRootFieldNumber = 5;
    private pb::ByteString transactionsRoot_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransactionsRoot
    {
        get { return transactionsRoot_; }
        set
        {
            transactionsRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "receipts_root" field.</summary>
    public const int ReceiptsRootFieldNumber = 6;
    private pb::ByteString receiptsRoot_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ReceiptsRoot
    {
        get { return receiptsRoot_; }
        set
        {
            receiptsRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "quota_used" field.</summary>
    public const int QuotaUsedFieldNumber = 7;
    private ulong quotaUsed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QuotaUsed
    {
        get { return quotaUsed_; }
        set
        {
            quotaUsed_ = value;
        }
    }

    /// <summary>Field number for the "quota_limit" field.</summary>
    public const int QuotaLimitFieldNumber = 8;
    private ulong quotaLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QuotaLimit
    {
        get { return quotaLimit_; }
        set
        {
            quotaLimit_ = value;
        }
    }

    /// <summary>Field number for the "proof" field.</summary>
    public const int ProofFieldNumber = 9;
    private global::Proof proof_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proof Proof
    {
        get { return proof_; }
        set
        {
            proof_ = value;
        }
    }

    /// <summary>Field number for the "proposer" field.</summary>
    public const int ProposerFieldNumber = 10;
    private pb::ByteString proposer_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Proposer
    {
        get { return proposer_; }
        set
        {
            proposer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as BlockHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockHeader other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Prevhash != other.Prevhash) return false;
        if (Timestamp != other.Timestamp) return false;
        if (Height != other.Height) return false;
        if (StateRoot != other.StateRoot) return false;
        if (TransactionsRoot != other.TransactionsRoot) return false;
        if (ReceiptsRoot != other.ReceiptsRoot) return false;
        if (QuotaUsed != other.QuotaUsed) return false;
        if (QuotaLimit != other.QuotaLimit) return false;
        if (!object.Equals(Proof, other.Proof)) return false;
        if (Proposer != other.Proposer) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Prevhash.Length != 0) hash ^= Prevhash.GetHashCode();
        if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
        if (Height != 0UL) hash ^= Height.GetHashCode();
        if (StateRoot.Length != 0) hash ^= StateRoot.GetHashCode();
        if (TransactionsRoot.Length != 0) hash ^= TransactionsRoot.GetHashCode();
        if (ReceiptsRoot.Length != 0) hash ^= ReceiptsRoot.GetHashCode();
        if (QuotaUsed != 0UL) hash ^= QuotaUsed.GetHashCode();
        if (QuotaLimit != 0UL) hash ^= QuotaLimit.GetHashCode();
        if (proof_ != null) hash ^= Proof.GetHashCode();
        if (Proposer.Length != 0) hash ^= Proposer.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Prevhash.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteBytes(Prevhash);
        }
        if (Timestamp != 0UL)
        {
            output.WriteRawTag(16);
            output.WriteUInt64(Timestamp);
        }
        if (Height != 0UL)
        {
            output.WriteRawTag(24);
            output.WriteUInt64(Height);
        }
        if (StateRoot.Length != 0)
        {
            output.WriteRawTag(34);
            output.WriteBytes(StateRoot);
        }
        if (TransactionsRoot.Length != 0)
        {
            output.WriteRawTag(42);
            output.WriteBytes(TransactionsRoot);
        }
        if (ReceiptsRoot.Length != 0)
        {
            output.WriteRawTag(50);
            output.WriteBytes(ReceiptsRoot);
        }
        if (QuotaUsed != 0UL)
        {
            output.WriteRawTag(56);
            output.WriteUInt64(QuotaUsed);
        }
        if (QuotaLimit != 0UL)
        {
            output.WriteRawTag(64);
            output.WriteUInt64(QuotaLimit);
        }
        if (proof_ != null)
        {
            output.WriteRawTag(74);
            output.WriteMessage(Proof);
        }
        if (Proposer.Length != 0)
        {
            output.WriteRawTag(82);
            output.WriteBytes(Proposer);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Prevhash.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Prevhash);
        }
        if (Timestamp != 0UL)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
        }
        if (Height != 0UL)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Height);
        }
        if (StateRoot.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(StateRoot);
        }
        if (TransactionsRoot.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransactionsRoot);
        }
        if (ReceiptsRoot.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReceiptsRoot);
        }
        if (QuotaUsed != 0UL)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QuotaUsed);
        }
        if (QuotaLimit != 0UL)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QuotaLimit);
        }
        if (proof_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Proof);
        }
        if (Proposer.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Proposer);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockHeader other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Prevhash.Length != 0)
        {
            Prevhash = other.Prevhash;
        }
        if (other.Timestamp != 0UL)
        {
            Timestamp = other.Timestamp;
        }
        if (other.Height != 0UL)
        {
            Height = other.Height;
        }
        if (other.StateRoot.Length != 0)
        {
            StateRoot = other.StateRoot;
        }
        if (other.TransactionsRoot.Length != 0)
        {
            TransactionsRoot = other.TransactionsRoot;
        }
        if (other.ReceiptsRoot.Length != 0)
        {
            ReceiptsRoot = other.ReceiptsRoot;
        }
        if (other.QuotaUsed != 0UL)
        {
            QuotaUsed = other.QuotaUsed;
        }
        if (other.QuotaLimit != 0UL)
        {
            QuotaLimit = other.QuotaLimit;
        }
        if (other.proof_ != null)
        {
            if (proof_ == null)
            {
                Proof = new global::Proof();
            }
            Proof.MergeFrom(other.Proof);
        }
        if (other.Proposer.Length != 0)
        {
            Proposer = other.Proposer;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        Prevhash = input.ReadBytes();
                        break;
                    }
                case 16:
                    {
                        Timestamp = input.ReadUInt64();
                        break;
                    }
                case 24:
                    {
                        Height = input.ReadUInt64();
                        break;
                    }
                case 34:
                    {
                        StateRoot = input.ReadBytes();
                        break;
                    }
                case 42:
                    {
                        TransactionsRoot = input.ReadBytes();
                        break;
                    }
                case 50:
                    {
                        ReceiptsRoot = input.ReadBytes();
                        break;
                    }
                case 56:
                    {
                        QuotaUsed = input.ReadUInt64();
                        break;
                    }
                case 64:
                    {
                        QuotaLimit = input.ReadUInt64();
                        break;
                    }
                case 74:
                    {
                        if (proof_ == null)
                        {
                            Proof = new global::Proof();
                        }
                        input.ReadMessage(Proof);
                        break;
                    }
                case 82:
                    {
                        Proposer = input.ReadBytes();
                        break;
                    }
            }
        }
    }

}

public sealed partial class Status : pb::IMessage<Status>
{
    private static readonly pb::MessageParser<Status> _parser = new pb::MessageParser<Status>(() => new Status());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Status> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::BlockchainReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status(Status other) : this()
    {
        hash_ = other.hash_;
        height_ = other.height_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status Clone()
    {
        return new Status(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash
    {
        get { return hash_; }
        set
        {
            hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private ulong height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Height
    {
        get { return height_; }
        set
        {
            height_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as Status);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Status other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Hash != other.Hash) return false;
        if (Height != other.Height) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Hash.Length != 0) hash ^= Hash.GetHashCode();
        if (Height != 0UL) hash ^= Height.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Hash.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteBytes(Hash);
        }
        if (Height != 0UL)
        {
            output.WriteRawTag(16);
            output.WriteUInt64(Height);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Hash.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
        }
        if (Height != 0UL)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Height);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Status other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Hash.Length != 0)
        {
            Hash = other.Hash;
        }
        if (other.Height != 0UL)
        {
            Height = other.Height;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        Hash = input.ReadBytes();
                        break;
                    }
                case 16:
                    {
                        Height = input.ReadUInt64();
                        break;
                    }
            }
        }
    }

}

public sealed partial class AccountGasLimit : pb::IMessage<AccountGasLimit>
{
    private static readonly pb::MessageParser<AccountGasLimit> _parser = new pb::MessageParser<AccountGasLimit>(() => new AccountGasLimit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountGasLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::BlockchainReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountGasLimit()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountGasLimit(AccountGasLimit other) : this()
    {
        commonQuotaLimit_ = other.commonQuotaLimit_;
        specificQuotaLimit_ = other.specificQuotaLimit_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountGasLimit Clone()
    {
        return new AccountGasLimit(this);
    }

    /// <summary>Field number for the "common_quota_limit" field.</summary>
    public const int CommonQuotaLimitFieldNumber = 1;
    private ulong commonQuotaLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CommonQuotaLimit
    {
        get { return commonQuotaLimit_; }
        set
        {
            commonQuotaLimit_ = value;
        }
    }

    /// <summary>Field number for the "specific_quota_limit" field.</summary>
    public const int SpecificQuotaLimitFieldNumber = 2;
    private static readonly pbc::MapField<string, ulong>.Codec _map_specificQuotaLimit_codec
        = new pbc::MapField<string, ulong>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForUInt64(16, 0UL), 18);
    private readonly pbc::MapField<string, ulong> specificQuotaLimit_ = new pbc::MapField<string, ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, ulong> SpecificQuotaLimit
    {
        get { return specificQuotaLimit_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as AccountGasLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountGasLimit other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (CommonQuotaLimit != other.CommonQuotaLimit) return false;
        if (!SpecificQuotaLimit.Equals(other.SpecificQuotaLimit)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (CommonQuotaLimit != 0UL) hash ^= CommonQuotaLimit.GetHashCode();
        hash ^= SpecificQuotaLimit.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (CommonQuotaLimit != 0UL)
        {
            output.WriteRawTag(8);
            output.WriteUInt64(CommonQuotaLimit);
        }
        specificQuotaLimit_.WriteTo(output, _map_specificQuotaLimit_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (CommonQuotaLimit != 0UL)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CommonQuotaLimit);
        }
        size += specificQuotaLimit_.CalculateSize(_map_specificQuotaLimit_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountGasLimit other)
    {
        if (other == null)
        {
            return;
        }
        if (other.CommonQuotaLimit != 0UL)
        {
            CommonQuotaLimit = other.CommonQuotaLimit;
        }
        specificQuotaLimit_.Add(other.specificQuotaLimit_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        CommonQuotaLimit = input.ReadUInt64();
                        break;
                    }
                case 18:
                    {
                        specificQuotaLimit_.AddEntriesFrom(input, _map_specificQuotaLimit_codec);
                        break;
                    }
            }
        }
    }

}

public sealed partial class RichStatus : pb::IMessage<RichStatus>
{
    private static readonly pb::MessageParser<RichStatus> _parser = new pb::MessageParser<RichStatus>(() => new RichStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RichStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::BlockchainReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RichStatus()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RichStatus(RichStatus other) : this()
    {
        hash_ = other.hash_;
        height_ = other.height_;
        nodes_ = other.nodes_.Clone();
        interval_ = other.interval_;
        version_ = other.version_;
        validators_ = other.validators_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RichStatus Clone()
    {
        return new RichStatus(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash
    {
        get { return hash_; }
        set
        {
            hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private ulong height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Height
    {
        get { return height_; }
        set
        {
            height_ = value;
        }
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_nodes_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> nodes_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Nodes
    {
        get { return nodes_; }
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 4;
    private ulong interval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Interval
    {
        get { return interval_; }
        set
        {
            interval_ = value;
        }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 5;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version
    {
        get { return version_; }
        set
        {
            version_ = value;
        }
    }

    /// <summary>Field number for the "validators" field.</summary>
    public const int ValidatorsFieldNumber = 6;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_validators_codec
        = pb::FieldCodec.ForBytes(50);
    private readonly pbc::RepeatedField<pb::ByteString> validators_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Validators
    {
        get { return validators_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as RichStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RichStatus other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Hash != other.Hash) return false;
        if (Height != other.Height) return false;
        if (!nodes_.Equals(other.nodes_)) return false;
        if (Interval != other.Interval) return false;
        if (Version != other.Version) return false;
        if (!validators_.Equals(other.validators_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Hash.Length != 0) hash ^= Hash.GetHashCode();
        if (Height != 0UL) hash ^= Height.GetHashCode();
        hash ^= nodes_.GetHashCode();
        if (Interval != 0UL) hash ^= Interval.GetHashCode();
        if (Version != 0) hash ^= Version.GetHashCode();
        hash ^= validators_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Hash.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteBytes(Hash);
        }
        if (Height != 0UL)
        {
            output.WriteRawTag(16);
            output.WriteUInt64(Height);
        }
        nodes_.WriteTo(output, _repeated_nodes_codec);
        if (Interval != 0UL)
        {
            output.WriteRawTag(32);
            output.WriteUInt64(Interval);
        }
        if (Version != 0)
        {
            output.WriteRawTag(40);
            output.WriteUInt32(Version);
        }
        validators_.WriteTo(output, _repeated_validators_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Hash.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
        }
        if (Height != 0UL)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Height);
        }
        size += nodes_.CalculateSize(_repeated_nodes_codec);
        if (Interval != 0UL)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Interval);
        }
        if (Version != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
        }
        size += validators_.CalculateSize(_repeated_validators_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RichStatus other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Hash.Length != 0)
        {
            Hash = other.Hash;
        }
        if (other.Height != 0UL)
        {
            Height = other.Height;
        }
        nodes_.Add(other.nodes_);
        if (other.Interval != 0UL)
        {
            Interval = other.Interval;
        }
        if (other.Version != 0)
        {
            Version = other.Version;
        }
        validators_.Add(other.validators_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        Hash = input.ReadBytes();
                        break;
                    }
                case 16:
                    {
                        Height = input.ReadUInt64();
                        break;
                    }
                case 26:
                    {
                        nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
                        break;
                    }
                case 32:
                    {
                        Interval = input.ReadUInt64();
                        break;
                    }
                case 40:
                    {
                        Version = input.ReadUInt32();
                        break;
                    }
                case 50:
                    {
                        validators_.AddEntriesFrom(input, _repeated_validators_codec);
                        break;
                    }
            }
        }
    }

}

public sealed partial class CitaTransaction : pb::IMessage<CitaTransaction>
{
    private static readonly pb::MessageParser<CitaTransaction> _parser = new pb::MessageParser<CitaTransaction>(() => new CitaTransaction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CitaTransaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::BlockchainReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CitaTransaction()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CitaTransaction(CitaTransaction other) : this()
    {
        to_ = other.to_;
        nonce_ = other.nonce_;
        quota_ = other.quota_;
        validUntilBlock_ = other.validUntilBlock_;
        data_ = other.data_;
        value_ = other.value_;
        chainId_ = other.chainId_;
        version_ = other.version_;
        toV1_ = other.toV1_;
        chainIdV1_ = other.chainIdV1_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CitaTransaction Clone()
    {
        return new CitaTransaction(this);
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 1;
    private string to_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To
    {
        get { return to_; }
        set
        {
            to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "nonce" field.</summary>
    public const int NonceFieldNumber = 2;
    private string nonce_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nonce
    {
        get { return nonce_; }
        set
        {
            nonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "quota" field.</summary>
    public const int QuotaFieldNumber = 3;
    private ulong quota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Quota
    {
        get { return quota_; }
        set
        {
            quota_ = value;
        }
    }

    /// <summary>Field number for the "valid_until_block" field.</summary>
    public const int ValidUntilBlockFieldNumber = 4;
    private ulong validUntilBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ValidUntilBlock
    {
        get { return validUntilBlock_; }
        set
        {
            validUntilBlock_ = value;
        }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data
    {
        get { return data_; }
        set
        {
            data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 6;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value
    {
        get { return value_; }
        set
        {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "chain_id" field.</summary>
    public const int ChainIdFieldNumber = 7;
    private uint chainId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChainId
    {
        get { return chainId_; }
        set
        {
            chainId_ = value;
        }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 8;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version
    {
        get { return version_; }
        set
        {
            version_ = value;
        }
    }

    /// <summary>Field number for the "to_v1" field.</summary>
    public const int ToV1FieldNumber = 9;
    private pb::ByteString toV1_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ToV1
    {
        get { return toV1_; }
        set
        {
            toV1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "chain_id_v1" field.</summary>
    public const int ChainIdV1FieldNumber = 10;
    private pb::ByteString chainIdV1_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChainIdV1
    {
        get { return chainIdV1_; }
        set
        {
            chainIdV1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as CitaTransaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CitaTransaction other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (To != other.To) return false;
        if (Nonce != other.Nonce) return false;
        if (Quota != other.Quota) return false;
        if (ValidUntilBlock != other.ValidUntilBlock) return false;
        if (Data != other.Data) return false;
        if (Value != other.Value) return false;
        if (ChainId != other.ChainId) return false;
        if (Version != other.Version) return false;
        if (ToV1 != other.ToV1) return false;
        if (ChainIdV1 != other.ChainIdV1) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (To.Length != 0) hash ^= To.GetHashCode();
        if (Nonce.Length != 0) hash ^= Nonce.GetHashCode();
        if (Quota != 0UL) hash ^= Quota.GetHashCode();
        if (ValidUntilBlock != 0UL) hash ^= ValidUntilBlock.GetHashCode();
        if (Data.Length != 0) hash ^= Data.GetHashCode();
        if (Value.Length != 0) hash ^= Value.GetHashCode();
        if (ChainId != 0) hash ^= ChainId.GetHashCode();
        if (Version != 0) hash ^= Version.GetHashCode();
        if (ToV1.Length != 0) hash ^= ToV1.GetHashCode();
        if (ChainIdV1.Length != 0) hash ^= ChainIdV1.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (To.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(To);
        }
        if (Nonce.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteString(Nonce);
        }
        if (Quota != 0UL)
        {
            output.WriteRawTag(24);
            output.WriteUInt64(Quota);
        }
        if (ValidUntilBlock != 0UL)
        {
            output.WriteRawTag(32);
            output.WriteUInt64(ValidUntilBlock);
        }
        if (Data.Length != 0)
        {
            output.WriteRawTag(42);
            output.WriteBytes(Data);
        }
        if (Value.Length != 0)
        {
            output.WriteRawTag(50);
            output.WriteBytes(Value);
        }
        if (ChainId != 0)
        {
            output.WriteRawTag(56);
            output.WriteUInt32(ChainId);
        }
        if (Version != 0)
        {
            output.WriteRawTag(64);
            output.WriteUInt32(Version);
        }
        if (ToV1.Length != 0)
        {
            output.WriteRawTag(74);
            output.WriteBytes(ToV1);
        }
        if (ChainIdV1.Length != 0)
        {
            output.WriteRawTag(82);
            output.WriteBytes(ChainIdV1);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (To.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
        }
        if (Nonce.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Nonce);
        }
        if (Quota != 0UL)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Quota);
        }
        if (ValidUntilBlock != 0UL)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ValidUntilBlock);
        }
        if (Data.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
        }
        if (Value.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
        }
        if (ChainId != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChainId);
        }
        if (Version != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
        }
        if (ToV1.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(ToV1);
        }
        if (ChainIdV1.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChainIdV1);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CitaTransaction other)
    {
        if (other == null)
        {
            return;
        }
        if (other.To.Length != 0)
        {
            To = other.To;
        }
        if (other.Nonce.Length != 0)
        {
            Nonce = other.Nonce;
        }
        if (other.Quota != 0UL)
        {
            Quota = other.Quota;
        }
        if (other.ValidUntilBlock != 0UL)
        {
            ValidUntilBlock = other.ValidUntilBlock;
        }
        if (other.Data.Length != 0)
        {
            Data = other.Data;
        }
        if (other.Value.Length != 0)
        {
            Value = other.Value;
        }
        if (other.ChainId != 0)
        {
            ChainId = other.ChainId;
        }
        if (other.Version != 0)
        {
            Version = other.Version;
        }
        if (other.ToV1.Length != 0)
        {
            ToV1 = other.ToV1;
        }
        if (other.ChainIdV1.Length != 0)
        {
            ChainIdV1 = other.ChainIdV1;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        To = input.ReadString();
                        break;
                    }
                case 18:
                    {
                        Nonce = input.ReadString();
                        break;
                    }
                case 24:
                    {
                        Quota = input.ReadUInt64();
                        break;
                    }
                case 32:
                    {
                        ValidUntilBlock = input.ReadUInt64();
                        break;
                    }
                case 42:
                    {
                        Data = input.ReadBytes();
                        break;
                    }
                case 50:
                    {
                        Value = input.ReadBytes();
                        break;
                    }
                case 56:
                    {
                        ChainId = input.ReadUInt32();
                        break;
                    }
                case 64:
                    {
                        Version = input.ReadUInt32();
                        break;
                    }
                case 74:
                    {
                        ToV1 = input.ReadBytes();
                        break;
                    }
                case 82:
                    {
                        ChainIdV1 = input.ReadBytes();
                        break;
                    }
            }
        }
    }

}

public sealed partial class UnverifiedTransaction : pb::IMessage<UnverifiedTransaction>
{
    private static readonly pb::MessageParser<UnverifiedTransaction> _parser = new pb::MessageParser<UnverifiedTransaction>(() => new UnverifiedTransaction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnverifiedTransaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::BlockchainReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnverifiedTransaction()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnverifiedTransaction(UnverifiedTransaction other) : this()
    {
        transaction_ = other.transaction_ != null ? other.transaction_.Clone() : null;
        signature_ = other.signature_;
        crypto_ = other.crypto_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnverifiedTransaction Clone()
    {
        return new UnverifiedTransaction(this);
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 1;
    private global::CitaTransaction transaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CitaTransaction Transaction
    {
        get { return transaction_; }
        set
        {
            transaction_ = value;
        }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature
    {
        get { return signature_; }
        set
        {
            signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "crypto" field.</summary>
    public const int CryptoFieldNumber = 3;
    private global::CitaCrypto crypto_ = global::CitaCrypto.Default;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CitaCrypto Crypto
    {
        get { return crypto_; }
        set
        {
            crypto_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as UnverifiedTransaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnverifiedTransaction other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!object.Equals(Transaction, other.Transaction)) return false;
        if (Signature != other.Signature) return false;
        if (Crypto != other.Crypto) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (transaction_ != null) hash ^= Transaction.GetHashCode();
        if (Signature.Length != 0) hash ^= Signature.GetHashCode();
        if (Crypto != global::CitaCrypto.Default) hash ^= Crypto.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (transaction_ != null)
        {
            output.WriteRawTag(10);
            output.WriteMessage(Transaction);
        }
        if (Signature.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteBytes(Signature);
        }
        if (Crypto != global::CitaCrypto.Default)
        {
            output.WriteRawTag(24);
            output.WriteEnum((int)Crypto);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (transaction_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transaction);
        }
        if (Signature.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
        }
        if (Crypto != global::CitaCrypto.Default)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Crypto);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnverifiedTransaction other)
    {
        if (other == null)
        {
            return;
        }
        if (other.transaction_ != null)
        {
            if (transaction_ == null)
            {
                Transaction = new global::CitaTransaction();
            }
            Transaction.MergeFrom(other.Transaction);
        }
        if (other.Signature.Length != 0)
        {
            Signature = other.Signature;
        }
        if (other.Crypto != global::CitaCrypto.Default)
        {
            Crypto = other.Crypto;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        if (transaction_ == null)
                        {
                            Transaction = new global::CitaTransaction();
                        }
                        input.ReadMessage(Transaction);
                        break;
                    }
                case 18:
                    {
                        Signature = input.ReadBytes();
                        break;
                    }
                case 24:
                    {
                        Crypto = (global::CitaCrypto)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

public sealed partial class SignedTransaction : pb::IMessage<SignedTransaction>
{
    private static readonly pb::MessageParser<SignedTransaction> _parser = new pb::MessageParser<SignedTransaction>(() => new SignedTransaction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignedTransaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::BlockchainReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedTransaction()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedTransaction(SignedTransaction other) : this()
    {
        transactionWithSig_ = other.transactionWithSig_ != null ? other.transactionWithSig_.Clone() : null;
        txHash_ = other.txHash_;
        signer_ = other.signer_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedTransaction Clone()
    {
        return new SignedTransaction(this);
    }

    /// <summary>Field number for the "transaction_with_sig" field.</summary>
    public const int TransactionWithSigFieldNumber = 1;
    private global::UnverifiedTransaction transactionWithSig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UnverifiedTransaction TransactionWithSig
    {
        get { return transactionWithSig_; }
        set
        {
            transactionWithSig_ = value;
        }
    }

    /// <summary>Field number for the "tx_hash" field.</summary>
    public const int TxHashFieldNumber = 2;
    private pb::ByteString txHash_ = pb::ByteString.Empty;
    /// <summary>
    /// SignedTransaction hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TxHash
    {
        get { return txHash_; }
        set
        {
            txHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "signer" field.</summary>
    public const int SignerFieldNumber = 3;
    private pb::ByteString signer_ = pb::ByteString.Empty;
    /// <summary>
    /// public key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signer
    {
        get { return signer_; }
        set
        {
            signer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as SignedTransaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignedTransaction other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!object.Equals(TransactionWithSig, other.TransactionWithSig)) return false;
        if (TxHash != other.TxHash) return false;
        if (Signer != other.Signer) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (transactionWithSig_ != null) hash ^= TransactionWithSig.GetHashCode();
        if (TxHash.Length != 0) hash ^= TxHash.GetHashCode();
        if (Signer.Length != 0) hash ^= Signer.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (transactionWithSig_ != null)
        {
            output.WriteRawTag(10);
            output.WriteMessage(TransactionWithSig);
        }
        if (TxHash.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteBytes(TxHash);
        }
        if (Signer.Length != 0)
        {
            output.WriteRawTag(26);
            output.WriteBytes(Signer);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (transactionWithSig_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransactionWithSig);
        }
        if (TxHash.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(TxHash);
        }
        if (Signer.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signer);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignedTransaction other)
    {
        if (other == null)
        {
            return;
        }
        if (other.transactionWithSig_ != null)
        {
            if (transactionWithSig_ == null)
            {
                TransactionWithSig = new global::UnverifiedTransaction();
            }
            TransactionWithSig.MergeFrom(other.TransactionWithSig);
        }
        if (other.TxHash.Length != 0)
        {
            TxHash = other.TxHash;
        }
        if (other.Signer.Length != 0)
        {
            Signer = other.Signer;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        if (transactionWithSig_ == null)
                        {
                            TransactionWithSig = new global::UnverifiedTransaction();
                        }
                        input.ReadMessage(TransactionWithSig);
                        break;
                    }
                case 18:
                    {
                        TxHash = input.ReadBytes();
                        break;
                    }
                case 26:
                    {
                        Signer = input.ReadBytes();
                        break;
                    }
            }
        }
    }

}

public sealed partial class BlockBody : pb::IMessage<BlockBody>
{
    private static readonly pb::MessageParser<BlockBody> _parser = new pb::MessageParser<BlockBody>(() => new BlockBody());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockBody> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::BlockchainReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockBody()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockBody(BlockBody other) : this()
    {
        transactions_ = other.transactions_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockBody Clone()
    {
        return new BlockBody(this);
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SignedTransaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(10, global::SignedTransaction.Parser);
    private readonly pbc::RepeatedField<global::SignedTransaction> transactions_ = new pbc::RepeatedField<global::SignedTransaction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SignedTransaction> Transactions
    {
        get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as BlockBody);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockBody other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!transactions_.Equals(other.transactions_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= transactions_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        transactions_.WriteTo(output, _repeated_transactions_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += transactions_.CalculateSize(_repeated_transactions_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockBody other)
    {
        if (other == null)
        {
            return;
        }
        transactions_.Add(other.transactions_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
                        break;
                    }
            }
        }
    }

}

public sealed partial class CompactBlockBody : pb::IMessage<CompactBlockBody>
{
    private static readonly pb::MessageParser<CompactBlockBody> _parser = new pb::MessageParser<CompactBlockBody>(() => new CompactBlockBody());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompactBlockBody> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::BlockchainReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompactBlockBody()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompactBlockBody(CompactBlockBody other) : this()
    {
        txHashes_ = other.txHashes_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompactBlockBody Clone()
    {
        return new CompactBlockBody(this);
    }

    /// <summary>Field number for the "tx_hashes" field.</summary>
    public const int TxHashesFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_txHashes_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> txHashes_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> TxHashes
    {
        get { return txHashes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as CompactBlockBody);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompactBlockBody other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!txHashes_.Equals(other.txHashes_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= txHashes_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        txHashes_.WriteTo(output, _repeated_txHashes_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += txHashes_.CalculateSize(_repeated_txHashes_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompactBlockBody other)
    {
        if (other == null)
        {
            return;
        }
        txHashes_.Add(other.txHashes_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        txHashes_.AddEntriesFrom(input, _repeated_txHashes_codec);
                        break;
                    }
            }
        }
    }

}

public sealed partial class Block : pb::IMessage<Block>
{
    private static readonly pb::MessageParser<Block> _parser = new pb::MessageParser<Block>(() => new Block());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Block> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::BlockchainReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block(Block other) : this()
    {
        version_ = other.version_;
        header_ = other.header_ != null ? other.header_.Clone() : null;
        body_ = other.body_ != null ? other.body_.Clone() : null;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block Clone()
    {
        return new Block(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version
    {
        get { return version_; }
        set
        {
            version_ = value;
        }
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 2;
    private global::BlockHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BlockHeader Header
    {
        get { return header_; }
        set
        {
            header_ = value;
        }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 3;
    private global::BlockBody body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BlockBody Body
    {
        get { return body_; }
        set
        {
            body_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as Block);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Block other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Version != other.Version) return false;
        if (!object.Equals(Header, other.Header)) return false;
        if (!object.Equals(Body, other.Body)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Version != 0) hash ^= Version.GetHashCode();
        if (header_ != null) hash ^= Header.GetHashCode();
        if (body_ != null) hash ^= Body.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Version != 0)
        {
            output.WriteRawTag(8);
            output.WriteUInt32(Version);
        }
        if (header_ != null)
        {
            output.WriteRawTag(18);
            output.WriteMessage(Header);
        }
        if (body_ != null)
        {
            output.WriteRawTag(26);
            output.WriteMessage(Body);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Version != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
        }
        if (header_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
        }
        if (body_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Block other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Version != 0)
        {
            Version = other.Version;
        }
        if (other.header_ != null)
        {
            if (header_ == null)
            {
                Header = new global::BlockHeader();
            }
            Header.MergeFrom(other.Header);
        }
        if (other.body_ != null)
        {
            if (body_ == null)
            {
                Body = new global::BlockBody();
            }
            Body.MergeFrom(other.Body);
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Version = input.ReadUInt32();
                        break;
                    }
                case 18:
                    {
                        if (header_ == null)
                        {
                            Header = new global::BlockHeader();
                        }
                        input.ReadMessage(Header);
                        break;
                    }
                case 26:
                    {
                        if (body_ == null)
                        {
                            Body = new global::BlockBody();
                        }
                        input.ReadMessage(Body);
                        break;
                    }
            }
        }
    }

}

public sealed partial class CompactBlock : pb::IMessage<CompactBlock>
{
    private static readonly pb::MessageParser<CompactBlock> _parser = new pb::MessageParser<CompactBlock>(() => new CompactBlock());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompactBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::BlockchainReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompactBlock()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompactBlock(CompactBlock other) : this()
    {
        version_ = other.version_;
        header_ = other.header_ != null ? other.header_.Clone() : null;
        body_ = other.body_ != null ? other.body_.Clone() : null;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompactBlock Clone()
    {
        return new CompactBlock(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version
    {
        get { return version_; }
        set
        {
            version_ = value;
        }
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 2;
    private global::BlockHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BlockHeader Header
    {
        get { return header_; }
        set
        {
            header_ = value;
        }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 3;
    private global::CompactBlockBody body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CompactBlockBody Body
    {
        get { return body_; }
        set
        {
            body_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as CompactBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompactBlock other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Version != other.Version) return false;
        if (!object.Equals(Header, other.Header)) return false;
        if (!object.Equals(Body, other.Body)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Version != 0) hash ^= Version.GetHashCode();
        if (header_ != null) hash ^= Header.GetHashCode();
        if (body_ != null) hash ^= Body.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Version != 0)
        {
            output.WriteRawTag(8);
            output.WriteUInt32(Version);
        }
        if (header_ != null)
        {
            output.WriteRawTag(18);
            output.WriteMessage(Header);
        }
        if (body_ != null)
        {
            output.WriteRawTag(26);
            output.WriteMessage(Body);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Version != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
        }
        if (header_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
        }
        if (body_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompactBlock other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Version != 0)
        {
            Version = other.Version;
        }
        if (other.header_ != null)
        {
            if (header_ == null)
            {
                Header = new global::BlockHeader();
            }
            Header.MergeFrom(other.Header);
        }
        if (other.body_ != null)
        {
            if (body_ == null)
            {
                Body = new global::CompactBlockBody();
            }
            Body.MergeFrom(other.Body);
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Version = input.ReadUInt32();
                        break;
                    }
                case 18:
                    {
                        if (header_ == null)
                        {
                            Header = new global::BlockHeader();
                        }
                        input.ReadMessage(Header);
                        break;
                    }
                case 26:
                    {
                        if (body_ == null)
                        {
                            Body = new global::CompactBlockBody();
                        }
                        input.ReadMessage(Body);
                        break;
                    }
            }
        }
    }

}

public sealed partial class BlockWithProof : pb::IMessage<BlockWithProof>
{
    private static readonly pb::MessageParser<BlockWithProof> _parser = new pb::MessageParser<BlockWithProof>(() => new BlockWithProof());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockWithProof> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::BlockchainReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockWithProof()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockWithProof(BlockWithProof other) : this()
    {
        blk_ = other.blk_ != null ? other.blk_.Clone() : null;
        proof_ = other.proof_ != null ? other.proof_.Clone() : null;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockWithProof Clone()
    {
        return new BlockWithProof(this);
    }

    /// <summary>Field number for the "blk" field.</summary>
    public const int BlkFieldNumber = 1;
    private global::Block blk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Block Blk
    {
        get { return blk_; }
        set
        {
            blk_ = value;
        }
    }

    /// <summary>Field number for the "proof" field.</summary>
    public const int ProofFieldNumber = 2;
    private global::Proof proof_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proof Proof
    {
        get { return proof_; }
        set
        {
            proof_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as BlockWithProof);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockWithProof other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!object.Equals(Blk, other.Blk)) return false;
        if (!object.Equals(Proof, other.Proof)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (blk_ != null) hash ^= Blk.GetHashCode();
        if (proof_ != null) hash ^= Proof.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (blk_ != null)
        {
            output.WriteRawTag(10);
            output.WriteMessage(Blk);
        }
        if (proof_ != null)
        {
            output.WriteRawTag(18);
            output.WriteMessage(Proof);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (blk_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blk);
        }
        if (proof_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Proof);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockWithProof other)
    {
        if (other == null)
        {
            return;
        }
        if (other.blk_ != null)
        {
            if (blk_ == null)
            {
                Blk = new global::Block();
            }
            Blk.MergeFrom(other.Blk);
        }
        if (other.proof_ != null)
        {
            if (proof_ == null)
            {
                Proof = new global::Proof();
            }
            Proof.MergeFrom(other.Proof);
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        if (blk_ == null)
                        {
                            Blk = new global::Block();
                        }
                        input.ReadMessage(Blk);
                        break;
                    }
                case 18:
                    {
                        if (proof_ == null)
                        {
                            Proof = new global::Proof();
                        }
                        input.ReadMessage(Proof);
                        break;
                    }
            }
        }
    }

}

public sealed partial class BlockTxs : pb::IMessage<BlockTxs>
{
    private static readonly pb::MessageParser<BlockTxs> _parser = new pb::MessageParser<BlockTxs>(() => new BlockTxs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockTxs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::BlockchainReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockTxs()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockTxs(BlockTxs other) : this()
    {
        height_ = other.height_;
        body_ = other.body_ != null ? other.body_.Clone() : null;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockTxs Clone()
    {
        return new BlockTxs(this);
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 1;
    private ulong height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Height
    {
        get { return height_; }
        set
        {
            height_ = value;
        }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 3;
    private global::BlockBody body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BlockBody Body
    {
        get { return body_; }
        set
        {
            body_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as BlockTxs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockTxs other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Height != other.Height) return false;
        if (!object.Equals(Body, other.Body)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Height != 0UL) hash ^= Height.GetHashCode();
        if (body_ != null) hash ^= Body.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Height != 0UL)
        {
            output.WriteRawTag(8);
            output.WriteUInt64(Height);
        }
        if (body_ != null)
        {
            output.WriteRawTag(26);
            output.WriteMessage(Body);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Height != 0UL)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Height);
        }
        if (body_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockTxs other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Height != 0UL)
        {
            Height = other.Height;
        }
        if (other.body_ != null)
        {
            if (body_ == null)
            {
                Body = new global::BlockBody();
            }
            Body.MergeFrom(other.Body);
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Height = input.ReadUInt64();
                        break;
                    }
                case 26:
                    {
                        if (body_ == null)
                        {
                            Body = new global::BlockBody();
                        }
                        input.ReadMessage(Body);
                        break;
                    }
            }
        }
    }

}

public sealed partial class BlackList : pb::IMessage<BlackList>
{
    private static readonly pb::MessageParser<BlackList> _parser = new pb::MessageParser<BlackList>(() => new BlackList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlackList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::BlockchainReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlackList()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlackList(BlackList other) : this()
    {
        blackList_ = other.blackList_.Clone();
        clearList_ = other.clearList_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlackList Clone()
    {
        return new BlackList(this);
    }

    /// <summary>Field number for the "black_list" field.</summary>
    public const int BlackList_FieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_blackList_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> blackList_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// black list of address, the account that sent the transaction does not have enough gas
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> BlackList_
    {
        get { return blackList_; }
    }

    /// <summary>Field number for the "clear_list" field.</summary>
    public const int ClearListFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_clearList_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> clearList_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// clear list of address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> ClearList
    {
        get { return clearList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as BlackList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlackList other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!blackList_.Equals(other.blackList_)) return false;
        if (!clearList_.Equals(other.clearList_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= blackList_.GetHashCode();
        hash ^= clearList_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        blackList_.WriteTo(output, _repeated_blackList_codec);
        clearList_.WriteTo(output, _repeated_clearList_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += blackList_.CalculateSize(_repeated_blackList_codec);
        size += clearList_.CalculateSize(_repeated_clearList_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlackList other)
    {
        if (other == null)
        {
            return;
        }
        blackList_.Add(other.blackList_);
        clearList_.Add(other.clearList_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        blackList_.AddEntriesFrom(input, _repeated_blackList_codec);
                        break;
                    }
                case 18:
                    {
                        clearList_.AddEntriesFrom(input, _repeated_clearList_codec);
                        break;
                    }
            }
        }
    }

}

/// <summary>
/// State positioning signal
/// </summary>
public sealed partial class StateSignal : pb::IMessage<StateSignal>
{
    private static readonly pb::MessageParser<StateSignal> _parser = new pb::MessageParser<StateSignal>(() => new StateSignal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StateSignal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::BlockchainReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateSignal()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateSignal(StateSignal other) : this()
    {
        height_ = other.height_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateSignal Clone()
    {
        return new StateSignal(this);
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 1;
    private ulong height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Height
    {
        get { return height_; }
        set
        {
            height_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as StateSignal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StateSignal other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Height != other.Height) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Height != 0UL) hash ^= Height.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Height != 0UL)
        {
            output.WriteRawTag(8);
            output.WriteUInt64(Height);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Height != 0UL)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Height);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StateSignal other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Height != 0UL)
        {
            Height = other.Height;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Height = input.ReadUInt64();
                        break;
                    }
            }
        }
    }

}

#endregion


#endregion Designer generated code
