// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/token/transaction.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from protos/token/transaction.proto</summary>
public static partial class TransactionReflection {

  #region Descriptor
  /// <summary>File descriptor for protos/token/transaction.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static TransactionReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Ch5wcm90b3MvdG9rZW4vdHJhbnNhY3Rpb24ucHJvdG8iRwoQVG9rZW5UcmFu",
          "c2FjdGlvbhIpCgxwbGFpbl9hY3Rpb24YASABKAsyES5QbGFpblRva2VuQWN0",
          "aW9uSABCCAoGYWN0aW9uIu0BChBQbGFpblRva2VuQWN0aW9uEiQKDHBsYWlu",
          "X2ltcG9ydBgBIAEoCzIMLlBsYWluSW1wb3J0SAASKAoOcGxhaW5fdHJhbnNm",
          "ZXIYAiABKAsyDi5QbGFpblRyYW5zZmVySAASJgoMcGxhaW5fcmVkZWVtGAMg",
          "ASgLMg4uUGxhaW5UcmFuc2ZlckgAEiYKDXBsYWluX2FwcHJvdmUYBCABKAsy",
          "DS5QbGFpbkFwcHJvdmVIABIxChNwbGFpbl90cmFuc2Zlcl9Gcm9tGAUgASgL",
          "MhIuUGxhaW5UcmFuc2ZlckZyb21IAEIGCgRkYXRhIiwKC1BsYWluSW1wb3J0",
          "Eh0KB291dHB1dHMYASADKAsyDC5QbGFpbk91dHB1dCJICg1QbGFpblRyYW5z",
          "ZmVyEhgKBmlucHV0cxgBIAMoCzIILklucHV0SWQSHQoHb3V0cHV0cxgCIAMo",
          "CzIMLlBsYWluT3V0cHV0IngKDFBsYWluQXBwcm92ZRIYCgZpbnB1dHMYASAD",
          "KAsyCC5JbnB1dElkEjAKEWRlbGVnYXRlZF9vdXRwdXRzGAIgAygLMhUuUGxh",
          "aW5EZWxlZ2F0ZWRPdXRwdXQSHAoGb3V0cHV0GAMgASgLMgwuUGxhaW5PdXRw",
          "dXQifQoRUGxhaW5UcmFuc2ZlckZyb20SGAoGaW5wdXRzGAEgAygLMgguSW5w",
          "dXRJZBIdCgdvdXRwdXRzGAIgAygLMgwuUGxhaW5PdXRwdXQSLwoQZGVsZWdh",
          "dGVkX291dHB1dBgDIAEoCzIVLlBsYWluRGVsZWdhdGVkT3V0cHV0IjwKC1Bs",
          "YWluT3V0cHV0Eg0KBW93bmVyGAEgASgMEgwKBHR5cGUYAiABKAkSEAoIcXVh",
          "bnRpdHkYAyABKAQiJwoHSW5wdXRJZBINCgV0eF9pZBgBIAEoCRINCgVpbmRl",
          "eBgCIAEoDSJZChRQbGFpbkRlbGVnYXRlZE91dHB1dBINCgVvd25lchgBIAEo",
          "DBISCgpkZWxlZ2F0ZWVzGAIgAygMEgwKBHR5cGUYAyABKAkSEAoIcXVhbnRp",
          "dHkYBCABKARCUQojb3JnLmh5cGVybGVkZ2VyLmZhYnJpYy5wcm90b3MudG9r",
          "ZW5aKmdpdGh1Yi5jb20vaHlwZXJsZWRnZXIvZmFicmljL3Byb3Rvcy90b2tl",
          "bmIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::TokenTransaction), global::TokenTransaction.Parser, new[]{ "PlainAction" }, new[]{ "Action" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlainTokenAction), global::PlainTokenAction.Parser, new[]{ "PlainImport", "PlainTransfer", "PlainRedeem", "PlainApprove", "PlainTransferFrom" }, new[]{ "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlainImport), global::PlainImport.Parser, new[]{ "Outputs" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlainTransfer), global::PlainTransfer.Parser, new[]{ "Inputs", "Outputs" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlainApprove), global::PlainApprove.Parser, new[]{ "Inputs", "DelegatedOutputs", "Output" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlainTransferFrom), global::PlainTransferFrom.Parser, new[]{ "Inputs", "Outputs", "DelegatedOutput" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlainOutput), global::PlainOutput.Parser, new[]{ "Owner", "Type", "Quantity" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InputId), global::InputId.Parser, new[]{ "TxId", "Index" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlainDelegatedOutput), global::PlainDelegatedOutput.Parser, new[]{ "Owner", "Delegatees", "Type", "Quantity" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// TokenTransaction governs the structure of Payload.data, when
/// the transaction's envelope header indicates a transaction of type
/// "Token"
/// </summary>
public sealed partial class TokenTransaction : pb::IMessage<TokenTransaction> {
  private static readonly pb::MessageParser<TokenTransaction> _parser = new pb::MessageParser<TokenTransaction>(() => new TokenTransaction());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TokenTransaction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TransactionReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TokenTransaction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TokenTransaction(TokenTransaction other) : this() {
    switch (other.ActionCase) {
      case ActionOneofCase.PlainAction:
        PlainAction = other.PlainAction.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TokenTransaction Clone() {
    return new TokenTransaction(this);
  }

  /// <summary>Field number for the "plain_action" field.</summary>
  public const int PlainActionFieldNumber = 1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlainTokenAction PlainAction {
    get { return actionCase_ == ActionOneofCase.PlainAction ? (global::PlainTokenAction) action_ : null; }
    set {
      action_ = value;
      actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.PlainAction;
    }
  }

  private object action_;
  /// <summary>Enum of possible cases for the "action" oneof.</summary>
  public enum ActionOneofCase {
    None = 0,
    PlainAction = 1,
  }
  private ActionOneofCase actionCase_ = ActionOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActionOneofCase ActionCase {
    get { return actionCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAction() {
    actionCase_ = ActionOneofCase.None;
    action_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TokenTransaction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TokenTransaction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(PlainAction, other.PlainAction)) return false;
    if (ActionCase != other.ActionCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (actionCase_ == ActionOneofCase.PlainAction) hash ^= PlainAction.GetHashCode();
    hash ^= (int) actionCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (actionCase_ == ActionOneofCase.PlainAction) {
      output.WriteRawTag(10);
      output.WriteMessage(PlainAction);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (actionCase_ == ActionOneofCase.PlainAction) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlainAction);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TokenTransaction other) {
    if (other == null) {
      return;
    }
    switch (other.ActionCase) {
      case ActionOneofCase.PlainAction:
        if (PlainAction == null) {
          PlainAction = new global::PlainTokenAction();
        }
        PlainAction.MergeFrom(other.PlainAction);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          global::PlainTokenAction subBuilder = new global::PlainTokenAction();
          if (actionCase_ == ActionOneofCase.PlainAction) {
            subBuilder.MergeFrom(PlainAction);
          }
          input.ReadMessage(subBuilder);
          PlainAction = subBuilder;
          break;
        }
      }
    }
  }

}

/// <summary>
/// PlainTokenAction governs the structure of a token action that is
/// subjected to no privacy restrictions
/// </summary>
public sealed partial class PlainTokenAction : pb::IMessage<PlainTokenAction> {
  private static readonly pb::MessageParser<PlainTokenAction> _parser = new pb::MessageParser<PlainTokenAction>(() => new PlainTokenAction());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlainTokenAction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TransactionReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainTokenAction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainTokenAction(PlainTokenAction other) : this() {
    switch (other.DataCase) {
      case DataOneofCase.PlainImport:
        PlainImport = other.PlainImport.Clone();
        break;
      case DataOneofCase.PlainTransfer:
        PlainTransfer = other.PlainTransfer.Clone();
        break;
      case DataOneofCase.PlainRedeem:
        PlainRedeem = other.PlainRedeem.Clone();
        break;
      case DataOneofCase.PlainApprove:
        PlainApprove = other.PlainApprove.Clone();
        break;
      case DataOneofCase.PlainTransferFrom:
        PlainTransferFrom = other.PlainTransferFrom.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainTokenAction Clone() {
    return new PlainTokenAction(this);
  }

  /// <summary>Field number for the "plain_import" field.</summary>
  public const int PlainImportFieldNumber = 1;
  /// <summary>
  /// A plaintext token import transaction
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlainImport PlainImport {
    get { return dataCase_ == DataOneofCase.PlainImport ? (global::PlainImport) data_ : null; }
    set {
      data_ = value;
      dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.PlainImport;
    }
  }

  /// <summary>Field number for the "plain_transfer" field.</summary>
  public const int PlainTransferFieldNumber = 2;
  /// <summary>
  /// A plaintext token transfer transaction
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlainTransfer PlainTransfer {
    get { return dataCase_ == DataOneofCase.PlainTransfer ? (global::PlainTransfer) data_ : null; }
    set {
      data_ = value;
      dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.PlainTransfer;
    }
  }

  /// <summary>Field number for the "plain_redeem" field.</summary>
  public const int PlainRedeemFieldNumber = 3;
  /// <summary>
  /// A plaintext token redeem transaction
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlainTransfer PlainRedeem {
    get { return dataCase_ == DataOneofCase.PlainRedeem ? (global::PlainTransfer) data_ : null; }
    set {
      data_ = value;
      dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.PlainRedeem;
    }
  }

  /// <summary>Field number for the "plain_approve" field.</summary>
  public const int PlainApproveFieldNumber = 4;
  /// <summary>
  /// A plaintext token approve transaction
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlainApprove PlainApprove {
    get { return dataCase_ == DataOneofCase.PlainApprove ? (global::PlainApprove) data_ : null; }
    set {
      data_ = value;
      dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.PlainApprove;
    }
  }

  /// <summary>Field number for the "plain_transfer_From" field.</summary>
  public const int PlainTransferFromFieldNumber = 5;
  /// <summary>
  /// A plaintext token transfer from transaction
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlainTransferFrom PlainTransferFrom {
    get { return dataCase_ == DataOneofCase.PlainTransferFrom ? (global::PlainTransferFrom) data_ : null; }
    set {
      data_ = value;
      dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.PlainTransferFrom;
    }
  }

  private object data_;
  /// <summary>Enum of possible cases for the "data" oneof.</summary>
  public enum DataOneofCase {
    None = 0,
    PlainImport = 1,
    PlainTransfer = 2,
    PlainRedeem = 3,
    PlainApprove = 4,
    PlainTransferFrom = 5,
  }
  private DataOneofCase dataCase_ = DataOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataOneofCase DataCase {
    get { return dataCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearData() {
    dataCase_ = DataOneofCase.None;
    data_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlainTokenAction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlainTokenAction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(PlainImport, other.PlainImport)) return false;
    if (!object.Equals(PlainTransfer, other.PlainTransfer)) return false;
    if (!object.Equals(PlainRedeem, other.PlainRedeem)) return false;
    if (!object.Equals(PlainApprove, other.PlainApprove)) return false;
    if (!object.Equals(PlainTransferFrom, other.PlainTransferFrom)) return false;
    if (DataCase != other.DataCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (dataCase_ == DataOneofCase.PlainImport) hash ^= PlainImport.GetHashCode();
    if (dataCase_ == DataOneofCase.PlainTransfer) hash ^= PlainTransfer.GetHashCode();
    if (dataCase_ == DataOneofCase.PlainRedeem) hash ^= PlainRedeem.GetHashCode();
    if (dataCase_ == DataOneofCase.PlainApprove) hash ^= PlainApprove.GetHashCode();
    if (dataCase_ == DataOneofCase.PlainTransferFrom) hash ^= PlainTransferFrom.GetHashCode();
    hash ^= (int) dataCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (dataCase_ == DataOneofCase.PlainImport) {
      output.WriteRawTag(10);
      output.WriteMessage(PlainImport);
    }
    if (dataCase_ == DataOneofCase.PlainTransfer) {
      output.WriteRawTag(18);
      output.WriteMessage(PlainTransfer);
    }
    if (dataCase_ == DataOneofCase.PlainRedeem) {
      output.WriteRawTag(26);
      output.WriteMessage(PlainRedeem);
    }
    if (dataCase_ == DataOneofCase.PlainApprove) {
      output.WriteRawTag(34);
      output.WriteMessage(PlainApprove);
    }
    if (dataCase_ == DataOneofCase.PlainTransferFrom) {
      output.WriteRawTag(42);
      output.WriteMessage(PlainTransferFrom);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (dataCase_ == DataOneofCase.PlainImport) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlainImport);
    }
    if (dataCase_ == DataOneofCase.PlainTransfer) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlainTransfer);
    }
    if (dataCase_ == DataOneofCase.PlainRedeem) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlainRedeem);
    }
    if (dataCase_ == DataOneofCase.PlainApprove) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlainApprove);
    }
    if (dataCase_ == DataOneofCase.PlainTransferFrom) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlainTransferFrom);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlainTokenAction other) {
    if (other == null) {
      return;
    }
    switch (other.DataCase) {
      case DataOneofCase.PlainImport:
        if (PlainImport == null) {
          PlainImport = new global::PlainImport();
        }
        PlainImport.MergeFrom(other.PlainImport);
        break;
      case DataOneofCase.PlainTransfer:
        if (PlainTransfer == null) {
          PlainTransfer = new global::PlainTransfer();
        }
        PlainTransfer.MergeFrom(other.PlainTransfer);
        break;
      case DataOneofCase.PlainRedeem:
        if (PlainRedeem == null) {
          PlainRedeem = new global::PlainTransfer();
        }
        PlainRedeem.MergeFrom(other.PlainRedeem);
        break;
      case DataOneofCase.PlainApprove:
        if (PlainApprove == null) {
          PlainApprove = new global::PlainApprove();
        }
        PlainApprove.MergeFrom(other.PlainApprove);
        break;
      case DataOneofCase.PlainTransferFrom:
        if (PlainTransferFrom == null) {
          PlainTransferFrom = new global::PlainTransferFrom();
        }
        PlainTransferFrom.MergeFrom(other.PlainTransferFrom);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          global::PlainImport subBuilder = new global::PlainImport();
          if (dataCase_ == DataOneofCase.PlainImport) {
            subBuilder.MergeFrom(PlainImport);
          }
          input.ReadMessage(subBuilder);
          PlainImport = subBuilder;
          break;
        }
        case 18: {
          global::PlainTransfer subBuilder = new global::PlainTransfer();
          if (dataCase_ == DataOneofCase.PlainTransfer) {
            subBuilder.MergeFrom(PlainTransfer);
          }
          input.ReadMessage(subBuilder);
          PlainTransfer = subBuilder;
          break;
        }
        case 26: {
          global::PlainTransfer subBuilder = new global::PlainTransfer();
          if (dataCase_ == DataOneofCase.PlainRedeem) {
            subBuilder.MergeFrom(PlainRedeem);
          }
          input.ReadMessage(subBuilder);
          PlainRedeem = subBuilder;
          break;
        }
        case 34: {
          global::PlainApprove subBuilder = new global::PlainApprove();
          if (dataCase_ == DataOneofCase.PlainApprove) {
            subBuilder.MergeFrom(PlainApprove);
          }
          input.ReadMessage(subBuilder);
          PlainApprove = subBuilder;
          break;
        }
        case 42: {
          global::PlainTransferFrom subBuilder = new global::PlainTransferFrom();
          if (dataCase_ == DataOneofCase.PlainTransferFrom) {
            subBuilder.MergeFrom(PlainTransferFrom);
          }
          input.ReadMessage(subBuilder);
          PlainTransferFrom = subBuilder;
          break;
        }
      }
    }
  }

}

/// <summary>
/// PlainImport specifies an import of one or more tokens in plaintext format
/// </summary>
public sealed partial class PlainImport : pb::IMessage<PlainImport> {
  private static readonly pb::MessageParser<PlainImport> _parser = new pb::MessageParser<PlainImport>(() => new PlainImport());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlainImport> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TransactionReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainImport() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainImport(PlainImport other) : this() {
    outputs_ = other.outputs_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainImport Clone() {
    return new PlainImport(this);
  }

  /// <summary>Field number for the "outputs" field.</summary>
  public const int OutputsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PlainOutput> _repeated_outputs_codec
      = pb::FieldCodec.ForMessage(10, global::PlainOutput.Parser);
  private readonly pbc::RepeatedField<global::PlainOutput> outputs_ = new pbc::RepeatedField<global::PlainOutput>();
  /// <summary>
  /// An import transaction may contain one or more outputs
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlainOutput> Outputs {
    get { return outputs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlainImport);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlainImport other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!outputs_.Equals(other.outputs_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= outputs_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    outputs_.WriteTo(output, _repeated_outputs_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += outputs_.CalculateSize(_repeated_outputs_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlainImport other) {
    if (other == null) {
      return;
    }
    outputs_.Add(other.outputs_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          outputs_.AddEntriesFrom(input, _repeated_outputs_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// PlainTransfer specifies a transfer of one or more plaintext tokens to one or more outputs
/// </summary>
public sealed partial class PlainTransfer : pb::IMessage<PlainTransfer> {
  private static readonly pb::MessageParser<PlainTransfer> _parser = new pb::MessageParser<PlainTransfer>(() => new PlainTransfer());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlainTransfer> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TransactionReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainTransfer() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainTransfer(PlainTransfer other) : this() {
    inputs_ = other.inputs_.Clone();
    outputs_ = other.outputs_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainTransfer Clone() {
    return new PlainTransfer(this);
  }

  /// <summary>Field number for the "inputs" field.</summary>
  public const int InputsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::InputId> _repeated_inputs_codec
      = pb::FieldCodec.ForMessage(10, global::InputId.Parser);
  private readonly pbc::RepeatedField<global::InputId> inputs_ = new pbc::RepeatedField<global::InputId>();
  /// <summary>
  /// The inputs to the transfer transaction are specified by their ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::InputId> Inputs {
    get { return inputs_; }
  }

  /// <summary>Field number for the "outputs" field.</summary>
  public const int OutputsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PlainOutput> _repeated_outputs_codec
      = pb::FieldCodec.ForMessage(18, global::PlainOutput.Parser);
  private readonly pbc::RepeatedField<global::PlainOutput> outputs_ = new pbc::RepeatedField<global::PlainOutput>();
  /// <summary>
  /// A transfer transaction may contain one or more outputs
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlainOutput> Outputs {
    get { return outputs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlainTransfer);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlainTransfer other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!inputs_.Equals(other.inputs_)) return false;
    if(!outputs_.Equals(other.outputs_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= inputs_.GetHashCode();
    hash ^= outputs_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    inputs_.WriteTo(output, _repeated_inputs_codec);
    outputs_.WriteTo(output, _repeated_outputs_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += inputs_.CalculateSize(_repeated_inputs_codec);
    size += outputs_.CalculateSize(_repeated_outputs_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlainTransfer other) {
    if (other == null) {
      return;
    }
    inputs_.Add(other.inputs_);
    outputs_.Add(other.outputs_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
          break;
        }
        case 18: {
          outputs_.AddEntriesFrom(input, _repeated_outputs_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// PlainApprove specifies an approve of one or more tokens in plaintext format
/// </summary>
public sealed partial class PlainApprove : pb::IMessage<PlainApprove> {
  private static readonly pb::MessageParser<PlainApprove> _parser = new pb::MessageParser<PlainApprove>(() => new PlainApprove());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlainApprove> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TransactionReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainApprove() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainApprove(PlainApprove other) : this() {
    inputs_ = other.inputs_.Clone();
    delegatedOutputs_ = other.delegatedOutputs_.Clone();
    output_ = other.output_ != null ? other.output_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainApprove Clone() {
    return new PlainApprove(this);
  }

  /// <summary>Field number for the "inputs" field.</summary>
  public const int InputsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::InputId> _repeated_inputs_codec
      = pb::FieldCodec.ForMessage(10, global::InputId.Parser);
  private readonly pbc::RepeatedField<global::InputId> inputs_ = new pbc::RepeatedField<global::InputId>();
  /// <summary>
  /// The inputs to the transfer transaction are specified by their ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::InputId> Inputs {
    get { return inputs_; }
  }

  /// <summary>Field number for the "delegated_outputs" field.</summary>
  public const int DelegatedOutputsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PlainDelegatedOutput> _repeated_delegatedOutputs_codec
      = pb::FieldCodec.ForMessage(18, global::PlainDelegatedOutput.Parser);
  private readonly pbc::RepeatedField<global::PlainDelegatedOutput> delegatedOutputs_ = new pbc::RepeatedField<global::PlainDelegatedOutput>();
  /// <summary>
  /// An approve transaction contains one or more plain delegated outputs
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlainDelegatedOutput> DelegatedOutputs {
    get { return delegatedOutputs_; }
  }

  /// <summary>Field number for the "output" field.</summary>
  public const int OutputFieldNumber = 3;
  private global::PlainOutput output_;
  /// <summary>
  /// An approve transaction contains one plain output
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlainOutput Output {
    get { return output_; }
    set {
      output_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlainApprove);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlainApprove other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!inputs_.Equals(other.inputs_)) return false;
    if(!delegatedOutputs_.Equals(other.delegatedOutputs_)) return false;
    if (!object.Equals(Output, other.Output)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= inputs_.GetHashCode();
    hash ^= delegatedOutputs_.GetHashCode();
    if (output_ != null) hash ^= Output.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    inputs_.WriteTo(output, _repeated_inputs_codec);
    delegatedOutputs_.WriteTo(output, _repeated_delegatedOutputs_codec);
    if (output_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Output);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += inputs_.CalculateSize(_repeated_inputs_codec);
    size += delegatedOutputs_.CalculateSize(_repeated_delegatedOutputs_codec);
    if (output_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Output);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlainApprove other) {
    if (other == null) {
      return;
    }
    inputs_.Add(other.inputs_);
    delegatedOutputs_.Add(other.delegatedOutputs_);
    if (other.output_ != null) {
      if (output_ == null) {
        Output = new global::PlainOutput();
      }
      Output.MergeFrom(other.Output);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
          break;
        }
        case 18: {
          delegatedOutputs_.AddEntriesFrom(input, _repeated_delegatedOutputs_codec);
          break;
        }
        case 26: {
          if (output_ == null) {
            Output = new global::PlainOutput();
          }
          input.ReadMessage(Output);
          break;
        }
      }
    }
  }

}

/// <summary>
/// PlainTransferFrom specifies a transfer of one or more plaintext delegated tokens to one or more outputs
/// an to a delegated output
/// </summary>
public sealed partial class PlainTransferFrom : pb::IMessage<PlainTransferFrom> {
  private static readonly pb::MessageParser<PlainTransferFrom> _parser = new pb::MessageParser<PlainTransferFrom>(() => new PlainTransferFrom());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlainTransferFrom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TransactionReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainTransferFrom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainTransferFrom(PlainTransferFrom other) : this() {
    inputs_ = other.inputs_.Clone();
    outputs_ = other.outputs_.Clone();
    delegatedOutput_ = other.delegatedOutput_ != null ? other.delegatedOutput_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainTransferFrom Clone() {
    return new PlainTransferFrom(this);
  }

  /// <summary>Field number for the "inputs" field.</summary>
  public const int InputsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::InputId> _repeated_inputs_codec
      = pb::FieldCodec.ForMessage(10, global::InputId.Parser);
  private readonly pbc::RepeatedField<global::InputId> inputs_ = new pbc::RepeatedField<global::InputId>();
  /// <summary>
  /// The inputs to the transfer transaction are specified by their ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::InputId> Inputs {
    get { return inputs_; }
  }

  /// <summary>Field number for the "outputs" field.</summary>
  public const int OutputsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PlainOutput> _repeated_outputs_codec
      = pb::FieldCodec.ForMessage(18, global::PlainOutput.Parser);
  private readonly pbc::RepeatedField<global::PlainOutput> outputs_ = new pbc::RepeatedField<global::PlainOutput>();
  /// <summary>
  /// A transferFrom transaction contains multiple outputs
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlainOutput> Outputs {
    get { return outputs_; }
  }

  /// <summary>Field number for the "delegated_output" field.</summary>
  public const int DelegatedOutputFieldNumber = 3;
  private global::PlainDelegatedOutput delegatedOutput_;
  /// <summary>
  /// A transferFrom transaction may contain one delegatable output
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlainDelegatedOutput DelegatedOutput {
    get { return delegatedOutput_; }
    set {
      delegatedOutput_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlainTransferFrom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlainTransferFrom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!inputs_.Equals(other.inputs_)) return false;
    if(!outputs_.Equals(other.outputs_)) return false;
    if (!object.Equals(DelegatedOutput, other.DelegatedOutput)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= inputs_.GetHashCode();
    hash ^= outputs_.GetHashCode();
    if (delegatedOutput_ != null) hash ^= DelegatedOutput.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    inputs_.WriteTo(output, _repeated_inputs_codec);
    outputs_.WriteTo(output, _repeated_outputs_codec);
    if (delegatedOutput_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(DelegatedOutput);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += inputs_.CalculateSize(_repeated_inputs_codec);
    size += outputs_.CalculateSize(_repeated_outputs_codec);
    if (delegatedOutput_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DelegatedOutput);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlainTransferFrom other) {
    if (other == null) {
      return;
    }
    inputs_.Add(other.inputs_);
    outputs_.Add(other.outputs_);
    if (other.delegatedOutput_ != null) {
      if (delegatedOutput_ == null) {
        DelegatedOutput = new global::PlainDelegatedOutput();
      }
      DelegatedOutput.MergeFrom(other.DelegatedOutput);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
          break;
        }
        case 18: {
          outputs_.AddEntriesFrom(input, _repeated_outputs_codec);
          break;
        }
        case 26: {
          if (delegatedOutput_ == null) {
            DelegatedOutput = new global::PlainDelegatedOutput();
          }
          input.ReadMessage(DelegatedOutput);
          break;
        }
      }
    }
  }

}

/// <summary>
/// A PlainOutput is the result of import and transfer transactions using plaintext tokens
/// </summary>
public sealed partial class PlainOutput : pb::IMessage<PlainOutput> {
  private static readonly pb::MessageParser<PlainOutput> _parser = new pb::MessageParser<PlainOutput>(() => new PlainOutput());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlainOutput> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TransactionReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainOutput() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainOutput(PlainOutput other) : this() {
    owner_ = other.owner_;
    type_ = other.type_;
    quantity_ = other.quantity_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainOutput Clone() {
    return new PlainOutput(this);
  }

  /// <summary>Field number for the "owner" field.</summary>
  public const int OwnerFieldNumber = 1;
  private pb::ByteString owner_ = pb::ByteString.Empty;
  /// <summary>
  /// The owner is the serialization of a SerializedIdentity struct
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Owner {
    get { return owner_; }
    set {
      owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private string type_ = "";
  /// <summary>
  /// The token type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "quantity" field.</summary>
  public const int QuantityFieldNumber = 3;
  private ulong quantity_;
  /// <summary>
  /// The quantity of tokens
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Quantity {
    get { return quantity_; }
    set {
      quantity_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlainOutput);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlainOutput other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Owner != other.Owner) return false;
    if (Type != other.Type) return false;
    if (Quantity != other.Quantity) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Owner.Length != 0) hash ^= Owner.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (Quantity != 0UL) hash ^= Quantity.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Owner.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Owner);
    }
    if (Type.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Type);
    }
    if (Quantity != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(Quantity);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Owner.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Owner);
    }
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (Quantity != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Quantity);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlainOutput other) {
    if (other == null) {
      return;
    }
    if (other.Owner.Length != 0) {
      Owner = other.Owner;
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    if (other.Quantity != 0UL) {
      Quantity = other.Quantity;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Owner = input.ReadBytes();
          break;
        }
        case 18: {
          Type = input.ReadString();
          break;
        }
        case 24: {
          Quantity = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
/// An InputId specifies an output using the transaction ID and the index of the output in the transaction
/// </summary>
public sealed partial class InputId : pb::IMessage<InputId> {
  private static readonly pb::MessageParser<InputId> _parser = new pb::MessageParser<InputId>(() => new InputId());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<InputId> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TransactionReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputId() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputId(InputId other) : this() {
    txId_ = other.txId_;
    index_ = other.index_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputId Clone() {
    return new InputId(this);
  }

  /// <summary>Field number for the "tx_id" field.</summary>
  public const int TxIdFieldNumber = 1;
  private string txId_ = "";
  /// <summary>
  /// The transaction ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TxId {
    get { return txId_; }
    set {
      txId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 2;
  private uint index_;
  /// <summary>
  /// The index of the output in the transaction
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as InputId);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(InputId other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TxId != other.TxId) return false;
    if (Index != other.Index) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TxId.Length != 0) hash ^= TxId.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TxId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(TxId);
    }
    if (Index != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Index);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TxId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TxId);
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(InputId other) {
    if (other == null) {
      return;
    }
    if (other.TxId.Length != 0) {
      TxId = other.TxId;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          TxId = input.ReadString();
          break;
        }
        case 16: {
          Index = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// A PlainDelegatedOutput is the result of approve transactions using plaintext tokens
/// </summary>
public sealed partial class PlainDelegatedOutput : pb::IMessage<PlainDelegatedOutput> {
  private static readonly pb::MessageParser<PlainDelegatedOutput> _parser = new pb::MessageParser<PlainDelegatedOutput>(() => new PlainDelegatedOutput());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlainDelegatedOutput> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TransactionReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainDelegatedOutput() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainDelegatedOutput(PlainDelegatedOutput other) : this() {
    owner_ = other.owner_;
    delegatees_ = other.delegatees_.Clone();
    type_ = other.type_;
    quantity_ = other.quantity_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlainDelegatedOutput Clone() {
    return new PlainDelegatedOutput(this);
  }

  /// <summary>Field number for the "owner" field.</summary>
  public const int OwnerFieldNumber = 1;
  private pb::ByteString owner_ = pb::ByteString.Empty;
  /// <summary>
  /// The owner is the serialization of a SerializedIdentity struct
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Owner {
    get { return owner_; }
    set {
      owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "delegatees" field.</summary>
  public const int DelegateesFieldNumber = 2;
  private static readonly pb::FieldCodec<pb::ByteString> _repeated_delegatees_codec
      = pb::FieldCodec.ForBytes(18);
  private readonly pbc::RepeatedField<pb::ByteString> delegatees_ = new pbc::RepeatedField<pb::ByteString>();
  /// <summary>
  /// The delegatees is an arrary of the serialized identities that can spend the output on behalf
  /// the owner
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<pb::ByteString> Delegatees {
    get { return delegatees_; }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private string type_ = "";
  /// <summary>
  /// The token type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "quantity" field.</summary>
  public const int QuantityFieldNumber = 4;
  private ulong quantity_;
  /// <summary>
  /// The quantity of tokens
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Quantity {
    get { return quantity_; }
    set {
      quantity_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlainDelegatedOutput);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlainDelegatedOutput other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Owner != other.Owner) return false;
    if(!delegatees_.Equals(other.delegatees_)) return false;
    if (Type != other.Type) return false;
    if (Quantity != other.Quantity) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Owner.Length != 0) hash ^= Owner.GetHashCode();
    hash ^= delegatees_.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (Quantity != 0UL) hash ^= Quantity.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Owner.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Owner);
    }
    delegatees_.WriteTo(output, _repeated_delegatees_codec);
    if (Type.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Type);
    }
    if (Quantity != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(Quantity);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Owner.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Owner);
    }
    size += delegatees_.CalculateSize(_repeated_delegatees_codec);
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (Quantity != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Quantity);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlainDelegatedOutput other) {
    if (other == null) {
      return;
    }
    if (other.Owner.Length != 0) {
      Owner = other.Owner;
    }
    delegatees_.Add(other.delegatees_);
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    if (other.Quantity != 0UL) {
      Quantity = other.Quantity;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Owner = input.ReadBytes();
          break;
        }
        case 18: {
          delegatees_.AddEntriesFrom(input, _repeated_delegatees_codec);
          break;
        }
        case 26: {
          Type = input.ReadString();
          break;
        }
        case 32: {
          Quantity = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
